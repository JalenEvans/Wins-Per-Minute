# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Backend Tests

on:
  push:
  pull_request:
    branches: [ "main" ]

env:
    PORT: ${{ secrets.PORT }}
    NODE_ENV: ${{ secrets.NODE_ENV }}
    TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        ports:
          - 5432:5432
        env:
          PGUSER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.TEST_DB_NAME }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: wins-per-minute-backend/package-lock.json

    - name: Install dependencies
      run: npm ci
      working-directory: wins-per-minute-backend

    - name: Install netcat
      run: sudo apt-get update && sudo apt-get install -y netcat
      working-directory: wins-per-minute-backend
    
    - name: Start server
      run: |
        node server.js &
        for i in {1..10}; do
          if nc -z localhost $PORT; then
            echo "Server is up!"
            break
          fi
          echo "Waiting for server..."
          sleep 2
        done
      working-directory: wins-per-minute-backend
    
    - name: Run backend tests
      run: node --experimental-vm-modules node_modules/jest/bin/jest.js
      working-directory: wins-per-minute-backend
